name: "Terraform CI CD using Github Actions"

on: [push,workflow_dispatch]

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
 # S3 bucket for the Terraform state
 #BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

         # Install the selected version of Terraform CLI 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ secrets.TERRAFORM_VERSION }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        
        # Run a terraform fmt to check syntax
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Run a terraform validate
      - name: Terraform Validate
        id: validate
        run: terraform validate  -no-color
        
      - name: Terraform plan
        id: plan
        if: github.event_name == 'push'
        run: terraform plan -out=tfplan
   
      - name: Format and Upload Plan
        id: plan-output
        run: |
          terraform show -json tfplan > plan.json
          echo '```' > plan.txt
          terraform show -no-color tfplan >> plan.txt
          echo '```' >> plan.txt
        continue-on-error: true
        
      - name: Comment on Push Request
        if: github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('plan.txt', 'utf8');
            const { context } = require('@actions/github');
            const issueNumber = context.issue.number;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: issueNumber,
              body: `### Terraform Plan Result:\n\n${planOutput}`
            });

      - name: Manual Approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: trstringer/manual-approval@v1
        with:
          approvers: 'amitranjan0220'
          cancel-on-requested-changes: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
